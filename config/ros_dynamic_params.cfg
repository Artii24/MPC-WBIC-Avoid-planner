#!/usr/bin/env python
PACKAGE = 'be2r_cmpc_unitree'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#list of parameters
gen.add('Kp_cartesian_0', int_t, 0, "proportional gain", 150, 0, 1000)
gen.add('Kp_cartesian_1', int_t, 0, "proportional gain", 150, 0, 1000)
gen.add('Kp_cartesian_2', int_t, 0, "proportional gain", 150, 0, 1000)
gen.add('Kd_cartesian_0', int_t, 0, "differential gain", 3, 0, 100)
gen.add('Kd_cartesian_1', int_t, 0, "differential gain", 3, 0, 100)
gen.add('Kd_cartesian_2', int_t, 0, "differential gain", 3, 0, 100)

gen.add('Kp_joint_0', double_t, 0, "Kp_joint_0 gain", 3, 0, 10)
gen.add('Kp_joint_1', double_t, 0, "Kp_joint_1 gain", 3, 0, 10)
gen.add('Kp_joint_2', double_t, 0, "Kp_joint_2 gain", 3, 0, 10)

gen.add('Kd_joint_0', double_t, 0, "Kd_joint_0 gain", 1,   0, 5)
gen.add('Kd_joint_1', double_t, 0, "Kd_joint_1 gain", 0.2, 0, 5)
gen.add('Kd_joint_2', double_t, 0, "Kd_joint_2 gain", 0.2, 0, 5)

gen.add('Kp_ori_0', double_t, 0, "Kp_ori_0 gain", 100, 0, 200)
gen.add('Kp_ori_1', double_t, 0, "Kp_ori_1 gain", 100, 0, 200)
gen.add('Kp_ori_2', double_t, 0, "Kp_ori_2 gain", 100, 0, 200)

gen.add('Kd_ori_0', double_t, 0, "Kd_ori_0 gain", 10, 0, 50)
gen.add('Kd_ori_1', double_t, 0, "Kd_ori_1 gain", 10, 0, 50)
gen.add('Kd_ori_2', double_t, 0, "Kd_ori_2 gain", 10, 0, 50)

gen.add('Kp_body_0', double_t, 0, "Kp_body_0 gain", 100, 0, 200)
gen.add('Kp_body_1', double_t, 0, "Kp_body_1 gain", 100, 0, 200)
gen.add('Kp_body_2', double_t, 0, "Kp_body_2 gain", 100, 0, 200)

gen.add('Kd_body_0', double_t, 0, "Kd_body_0 gain", 10, 0, 50)
gen.add('Kd_body_1', double_t, 0, "Kd_body_1 gain", 10, 0, 50)
gen.add('Kd_body_2', double_t, 0, "Kd_body_2 gain", 10, 0, 50)

gen.add('Kp_foot_0', double_t, 0, "Kp_foot_0 gain", 500, 0, 1000)
gen.add('Kp_foot_1', double_t, 0, "Kp_foot_1 gain", 500, 0, 1000)
gen.add('Kp_foot_2', double_t, 0, "Kp_foot_2 gain", 500, 0, 1000)

gen.add('Kd_foot_0', double_t, 0, "Kd_foot_0 gain", 10, 0, 50)
gen.add('Kd_foot_1', double_t, 0, "Kd_foot_1 gain", 10, 0, 50)
gen.add('Kd_foot_2', double_t, 0, "Kd_foot_2 gain", 10, 0, 50)

gen.add("WBC", bool_t, 0, "Use WBC",  True)

fsm_state_enum = gen.enum([ gen.const("Passive", int_t, 0, "Do nothing"),
                            gen.const("MPC_Locomotion", int_t, 4, "Main locomotion state"),
                            gen.const("Balace_Stand", int_t, 3, "Balance on 4 legs"),
                            gen.const("Stand_Up", int_t, 1, "Stand up from groud"),
                            gen.const("Lay_Down", int_t, 7, "Lay down to groud"),
                            gen.const("VisionMPC", int_t, 8, "Vision based locomotion"),
                            gen.const("Testing", int_t, 12, "Testing state"),
                            gen.const("Recovery", int_t, 6, "Recovery state"),
                            ],"Set finite state machine state")

gen.add("FSM_State", int_t, 0, "Set finite state machine state", 0, 0, 12, edit_method=fsm_state_enum)

#example
#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
#gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

exit(gen.generate(PACKAGE, "be2r_cmpc_unitree", "ros_dynamic_params"))
